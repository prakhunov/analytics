#the database connection and profile is specified here so if you wanted to move to something like MySql or postgre you
#don't have to change anything
main_db {
  profile = "slick.jdbc.H2Profile$"
  db {
    url = "jdbc:h2:mem:test1"
    driver = org.h2.Driver
    keepAliveConnection = true
  }
}

akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  #used for the caching library
  #this basically means if something in the cache hasn't been accessed in 2min it will be invalidated, however
  #if it was in the cache for 5 minutes it would also be invalidated
  #this doesn't happen automatically and it only checks these conditions when the cache is being accessed so it
  #will refresh on the next request and not the very first one

  #since most requests occur in the same hour this means at most the last analytics query will lag by a minimum 5 minutes


  #Right now it's using an in memory cache backed by caffeine but you can create your own cache backed by something
  #like Redis in production. Akka Http caching is pretty flexible since you can make your own RedisCache instance
  #that inheretis from akka.http.caching.scaladsl.Cache and have the code not change

  http {
    caching {
      lfu-cache {
        initial-capacity: 25,
        max-capacity: 50,
        time-to-idle: "2 minutes",
        time-to-live: "5 minutes"
      }
    }
  }
}

http {
  interface = "0.0.0.0"
  port = 8080
}